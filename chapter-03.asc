== Join Point Yapısı

Bu bölümde AspectJ'nin en önemli yapısını detaylı bir şekilde ele alacağız.

AspectJ dilinin kullandığı yapılar 3 kısımda toplanmıştır. Bunlar: Ortak, Dinamik ve Statik crosscutting  (enine kesen) bölümlerdir. Bu bölümler, içlerinde farklı bileşenleri toplayarak bizim mevcut OOP sistemimizi AOP mantığı ile harmanlamamıza imkan veriyorlar. Ortak crosscutting, `join point`, `pointcut` ve `aspect` yapıları tarafından oluşmaktadır ve bu yapılar, dinamik ve statik bölümler ile kullanılır. Dinamik bölüm advice (tavsiye) yapıları ile şekillenmektedir. Advice yapısı sistemdeki ilgilerin farklılığına göre farklı görevlere sahip yapılardan oluşur:

* `After (finally) Advice`
    ** `After Throwing Advice` 
    ** `After Returning Advice`
* `Before Advice`
* `Around Advice`

NOTE:  Kısaca advice yapıları sistemdeki mevcut enine kesen ilgilerin olması gerektiği yerlerde çalışmasını sağlamaktadır. 

Statik crosscutting bölümü de `intertype declaration` (Ara Tip Tanımlama) ve `weave-time declarations` (declare error/warning/soft/parents) olarak tanımlanmıştır.

<<<

### Join Point Yapısı

Join point (birleşme/birleşim nokta) yapısı şuan hemen hemen mevcut olan tüm programlama dillerinde bulunmaktadır. Aslında, join point yapısı sadece programlama dilleriyle sınırlı değildir. Modelleme, tasarım ve diğer programlama tekniklerinin bazılarında da bu yapıyı bulabiliyoruz ki  _"Domain-Specific Aspect Languages (DSALs)"_ adı altında çok farklı aspect dilleri ortaya http://www.dsal.cl/dsal/inventory[*_çıkabiliyor_*]. Bu yapı AspectJ dilinin en temel ve en önemli özelliğidir. Bu yapı, crosscutting ilgilerin calıştırılacağı yerleri belirlememizde bize yardımcı olacak. Join point yapısı olmadan AOP yaklaşımını daha doğrusu AspectJ dilini etkin bir şekilde kullanamayız çünkü ilgileri esas kodlardan ayırmak için esas kodun bulunduğu elementin bilgilerine ihtiyacımız olmalı. Bunu belirlememiz için de crosscutting ilgilerden maruz kalmıs noktaları tespit etmeliyiz. Join point, bize bu noktaları belirlememizde yardımcı olmaktadır. Birleşim noktalarını tavsiye (advice) yapılarıyla bağladığımızda ki bu işlem için aracı yapı olan _pointcut_ kullanılmakta, hem esas kodlar hem de bağımsız (enine kesen) kodlar sistemin akışını bozmayacak şekilde çalışmaya başlayacaktır. Ek olarak, AspectJ bir Java eklenti dili olarak oluşturulduğundan, mevcut Java elementlerini (alanlar, metodlar, arayüzler, sınıflar vb) birleşim noktası olarak tanımlayabiliyoruz. Dolayısıyla esas sınıflara ve onların üyelerine ulaşabiliyoruz. Aşağıdaki kod parçasını inceleyelim: `information` paketinin içinde oluşturulmuş `Address` sınıfı, toplam 3 alana, 1 yapıcıya ve ayrıca 4 metoda sahip. Toplam da 8 elemente sahip bir sınıfımız vardır.

.Birleşim Noktaları
[source,java]
----
package information; 
public class Address {                                      <1> 
    private String address;                 
    private String city;           
    private String zip;          
    public Address(String address,String city,String zip){  <2>
        this.address = address;                             <3>
        this.city = city
        this.zip = zip;
    }
    public String getCity(){               + <4>
                                           +
        return this.city ;                 + 
                                           +
    }                                      +
    
    public String getAddress(){                            <5>
        printAddress();                                    <6>
        return this.address;
    } 
    
    public String setZip (String zip) {                    <7>
        this.zip = zip
    }
    
    private void printAddress(){                           <8>
        System.out.println("The current adress is "+ 
                                           this.address);  <9>
    }                                                    
}                                                           
----


IMPORTANT: Gösterilen Java kodları sadece birleşme noktalarını anlatmak amacıyla düzenlenmiştir.

Numaralandırılmış tüm satırlar birer birleşme noktasıdır. 

<1> `Address` sınıf tipini belirtmektedir

<2> _Yapıcı birleşim noktası_ (_constructor join point_) olarak belirtilir. Aynı zamanda bu yapıcı metod, _constructor-execution join point_ (_yapıcı-yürütme/çalışma birleşme noktası_) olarak da gösterilmektedir. 

<3> _Alana yazma erişimi birleşim noktası_ (_field write-access join point_) olarak tanımlanmaktadır. `address` alanına atanan yeni değer yazılır dolayısıyla bu yazma erişimine sahiptir.

<4> _Method-execution join point_ (_Metod çalışma birleşme noktası_) olarak tanımlanmıştır. Daha ayrıntılı söylemek gerekirse, `getCity` metodu tümüyle birleşme noktası olarak belirtilmiştir ( kapsadığı alanı belirtmek amaçlı artı (`+`) o yüzden konulmuştur). İlk süslü parantez `{` ile başlayıp son süslü parantez `}` ile biten tüm gövdeyi _metod-yürütme/çalışma_ birleşim noktası olarak adlandırılmaktadır. Ayrıca, bu tüm Java yapıcı metodların çalışma noktaları için de bu geçerlidir. 

<5> _Method-execution join point_ olarak işaret edilir. 

<6> Metod çağırma birleşim noktası (_method-call join point_) dır. `printAddress` metodunun çağırılması noktasında bağlanacak bir tavsiye yapısının, metodun içinde bulunan kodların öncesinde (6. satırdan önce), çevresinde (6. satırda) ya da sonrasında (6. satırdan sonra) çalışması gereken enine kesen ilgileri `getAddress` metodu içinde belirlemede kullanılır.

<7> _Method-execution join point_ olarak işaret edilir. 

<8> _Method-execution join point_ olarak işaret edilir. 

<9> _Alan okuma erişimi birleşim noktası_ (_field read-access join point_), mevcut `address` alanın değerinin gösterilmesinde yani mevcut adresin okunmasından önce ya da sonra gibi durumlarda çalışması istenen tavsiyelerin uygulanacağı nokta olarak belirtilmektedir.

Join point yapısını bir başlangıç bağı olarak da düşünebiliriz. Bu noktaları tespit ettiğimizde, temel Java elemenleri ile AspectJ elemenlerini bağlama imkanına sahip oluruz. Şu ana kadar gördüğümüz birleşim noktaları:

* *Method-execution*
* *Method-call*
* *Field write-access*
* *Field read-access*
* *Constructor-execution*

Bu noktaların yanı sıra 6 farklı nokta daha mevcuttur:

.*Constructor-call*:
[source,java]
----
    Address adres = new Address("Kültür mahallesi","İzmir",35);  //<1>
----

<1> `Address` sınıfının nesnesinin oluşturulmasında (uyarılmasında) gerçekleşen bir birleşim noktasıdır. `Method-call` ile benzer bir özelliğe sahiptir ama `new` ile yaratılan nesne bize doğrudan `constructor-call` noktasını belirtir.

.*Exception-handler*:
[source,java]
----
    try {
        aktar(miktar);
    } catch (YetersizBakiyeException ex) { 
        mesajGonder(ex);
        islemiGeriAl(miktar);
    } 
----

Süslü parantezler `{ }` arasında kalan tüm `catch` bloğunu kapsar.

<<<

.*Class-initialization*:
[source,java]
----
public class Address {

     static {
            defaultAddress = "Turkey";
            System.loadAddresses();
     }
    ...
}
----

Static initializer bloğunun içindeki kod satırlarını kapsamaktadır.

.*Object initialization*:
[source,java]
----
public class Address extends Map {
    public Address(String city,String zip){
        this.city = city                     // +
        this.zip = zip;                      // +
    }
    public Address(String address,String city,String zip){
        super(address);
        this.city = city                     // +
        this.zip = zip;                      // +
    }
    ...
}
----

Tüm artı (`+`) ile işaretlenen satırları kapsamaktadır. Üst sınıf olan `Map` yapıcı metodu bu satırların dışında tutulur. Örneğin: 3 değişkene sahip `Address` yapıcı metod bloğunun çalışmasından *önce*  ayarlanan ilgi bloğu `super(address);` satırından *sonra* çalışır. Her ne kadar biz bu yapıcı metodun (`super` metodun) *değil*, ayarlanan ilginin ilk *başta* çalışmasını istesekte, `super()` metodu bu koşulda istisna olarak *ilk* çalışan satır olur ve daha *sonra* gereken *enine kesen ilgi* çalışmaya başlar, *en son* yapıcı metodun içindeki kodlar çalışır ve işlem sonlanır.

.*Object pre-initialization*:
[source,java]
----
public class Address extends Map {

    public Address(String city,String zip){
        this.city = city                     // +
        this.zip = zip;                      // +
    }
    
    public Address(String address,String city,String zip){
        super(address);                      // +
        this.city = city                     // +
        this.zip = zip;                      // +
    }
    ...
}
----

Nesne başlatma noktasındaki istisna bu *ön* başlatma noktası ile giderilmektedir. `super` metodu artık `Address` yapıcı metoduna dahil olmuştur. Programı çalıştırdığımızda *ilk* önce bağımsız enine kesen ilgi(ler) çalışır daha *sonra* `super` metodu ve diğer 2 alan ataması yapılarak işlem sonlanır.

.*Advice Execution*:
[source,aspectj]
----
public aspect Trace {

    before() : ... { 
        // advice body 
    }
    
}
----

Son olarak _tavsiye yürütmesi birleşim noktası_ AspectJ ile sunulmaktadır. Temel Java elementleri dışında AspectJ nin yapıcı elementlerinden olan advice (tavsiye) yapısını da birleşim noktası olarak belirleyebiliyoruz. Bu nokta, sistemdeki tüm advice yapılarının içlerini kapsamaktadır. Örneğin `Trace` aspect biriminin içindeki `before` advice gövdesini (süslü parantezler ile sınırlı olan alanı `{ }`) tümüyle kapsamaktadır.

Tüm istenilen birleşim noktalarını tespit ettiğimizde, bir sonraki yapımız olan _pointcut_ ile bu noktaları *seçmemiz* gerekiyor ki pointcut yapılarını `tavsiyeler` ile bağlayarak ilgilerimizi kodlayıp o noktalarda çalıştırabilelim. 

IMPORTANT: Birleşim noktaları aynı zamanda enine kesen ilgilerden maruz kalmıs bölgeleri/elementleri göstermektedir. 

<<<

### Join Point Shadow

Birleşme noktalarını kod parçaları üzerinde açıklarken artı (`+`) veya satırları numaralandırmak gibi  yöntemlere başvurulmuştu ama böyle bir yöntemi malesef Java ve Aspect kaynak kod dosyalarının içerisinde yapamıyoruz. Daha doğrusu, birleşme noktalarını normalde görememekteyiz. Bu noktalar sadece çalışma zamanı (run-time) var olmaktalar. Örneğin, sistemde ne zaman bir metodun çağırılmasına ramak kalındığı an gibi. 

Aslında yukarıda değişik yöntemlere başvurulup gösterilen bu alanlar birer _birlesme/birleşim nokta gölgesidir_ (_join point shadow_, _JPS_). Sistemdeki her bir gölge birleşim noktalarını işaret etmektedir. AspectJ geliştiricilerin bu gölgeleri görüp daha iyi anlaması için de AspectJ ile birlikte gelen http://www.eclipse.org/ajdt/[AJDT] projesi, görsel olarak birleşme noktalarının nerelerde, hangi ilgiler için kullanıldığını detaylıca açıklamaktadır. Şekil 3.1 ile  `AdviceAfter` aspect biriminin içinde bulunan bir `after` advice tarafından ilgiye maruz kalan bölüm (yani esas kodun) içinde birleşim noktasındaki gölgesini görmekteyiz. Ayrıca bu bilgi biraz da bağlantılı olunan tavsiye yapısının tanımını bize göstermektedir. AJDT projesinin sunduğu diğer özellikler http://www.eclipse.org/articles/Article-Introducing-AJDT/article.html[bağlantıdan] incelenebilir.

image::images/ajdt-jps.png[caption="Şekil 1: ", title="Eclipse IDE içinde birleşim nokta gölgesi gösterimi",width=1100px]

Bu proje aynı zamanda `marker` özelliğinden de yararlanmıştır (Eclipse IDE Kepler/Luna). Proje bu özelliği kullanarak satırları belirtmek amacıyla bazı küçük simgeler ile bu gölgeleri güçlendirmektedir. Örneğimizde çalışması gereken esas ilgilerin çalışıp daha sonra `after tavsiye` (sonra tavsiye) yapısının çalıştığının bir anlatımı olarak `ok` (->) işareti ile gösterilmiştir.

IMPORTANT: İlgiler, mevcut sistemin davranışı değiştirmezler birleşme noktalarında. Bunun yerine ilgiler, sistemde maruz kalan esas kodların aralarına yeni ek eylemler sokmaktalar.

IMPORTANT: Birleşim noktası gölgeleri tavsiye yapılarıyla bağlandığında (pointcut yardımıyla) görebiliyoruz çünkü birleşme noktaları (yani maruz kalan noktalar) ile çalışıcak ilgi kodları o zaman aktifleşmektedir.