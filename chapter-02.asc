== Prensipler ve AspectJ
 
_Önsöz_ bölümünde belirtildiği gibi bu dilin ortaya çıkmasında rol oynayan prensipler açıklanacak ve daha sonra AspectJ diline geçiş yapılacaktır.

### Separation of Concerns

İlk başta _concern_ kelimesininin yazılım geliştirme dünyasında ne anlama geldiğini bilmemiz gerekmektedir. _Concern_, türkçede daha çok *ilgi* anlamında karşımıza çıkıyor. Bu kelimenin altında aslında farklı anlamlarda yatmaktadır, mesela *davranış* veya *özellik* olarak da arada karşımıza çıkabilir. En basitinden düşünecek olursak, bir masaya farklı alanlar için yazılmış rasgele dizili 100 kitap olsun. Bu kitapların arasından istediğimizi bulmak malesef O(100) sürmektedir karmaşıklık bakımından. Biz bu kitapları *ilgi* alanlarına (ya da özelliklerine) göre ayırırsak, bulmak istediğimiz kitabı tüm kitaplara tek tek bakmadan daha kısa bir sürede ve daha az yorularak bulabiliriz. Bu örneği yazılım alanına uygularsak eğer, geliştirilecek farklı özellikleri belli birimlere (sınıf ya da modül) _ayırarak_ bu özelliklere sahip birimleri belli alanda (yani paketlere) konuşlandırabiliriz. Yapılan bu ayırma işlemi projenin hem okunabilirliğini hem anlaşılabilirliğini ve hem de bakımını kolaylaştıracaktır. Aslında ister istemez yapılan bu faaliyet _Separation of Concerns_ (SoC, İlgilerin Ayrışması) tarasım prensibini doğrudan tetiklemektedir çünkü SoC, nesne yönelimli (Object-Oriented) sistemlerde birimselliği (modularity) arttırmada yardımcı olmaktadır. Temelinde SoC, sistemin farklı amaçlara göre birimlere ayrılmasını sağlamak adına kullanılır.

### Crosscutting Concerns

Her ne kadar SoC farklı ilgilerin ayrımında görev alsada, ayrılan birimlerin içerisinde de özgün ilgiler mevcut olabilir. Bu özgün ilgiler yazılım dünyasında _crosscutting concerns_ (yani enine kesen ilgiler) olarak belirtilmektedir. Peki bu ilgiler nelerdir?. Bunu söyle açıklamak istiyorum: GitHub üzerinden rasgele 2 Java projesi seçtim: https://github.com/AsyncHttpClient/async-http-client[async-http-client] ve https://github.com/perwendel/spark[spark]. Birimlere ayrılarak tasarlanmış ve geliştirilmeye devam edilen bu projeleri biraz inceledikten sonra ikisinde de ortak bir bağımsız ilgi farkettim: *_Loglama_*. Tekrar belirtmek istiyorum bu 2 proje birbirinden tamamen farklı özelliklere sahip ama bağımsız enine kesen fonksiyon olan loglama bu projelerin bir parçası olmuş ve tüm sisteme saçılmış durumdadır. 

Sanırım bu enine kesen ilgilerin neler olduğu hakkında biraz ipuçu vermiş bulunuyorum. Başlıca crosscutting ilgileri sıralamak gerekirse bunlar: security, logging, resource pooling, caching, exception-handling (loglama için kullanıldığında), performance monitoring, concurrency control, ve transaction management dır. 

IMPORTANT: Crosscutting ilgiler normalde esas kodlarının çalışmasını etkilememektedir. Bu eylemler sadece sistemin çalışma akışında aktif olurlar.

Crosscutting ilgilerin sistemde giderek artması sistemde 2 önemli sorunu da beraberinde getirmektedir: _**Kod Saçılması**_ (Code Scattering) ve _**Kod Dağılması**_ (Code Tangling). Kısaca, bir ilgi birden çok birime (sınıfa) saçılırken birden çok ilginin de aynı birimde dağılması sonucu oluşurlar. Bunu daha iyi algılamak için Şekil 1'e bakabiliriz. Şeklin sol tarafı *kod saçılması* nı göstermektedir. Turuncu renkteki enine kesen ilgi 3 birimde de kullanılmaktadır; yani bu ilgi, 3 birime de saçılmıştır. Diğer bir taraftan, B biriminin içine bakarsak, turuncu ilgi ile birlikte 3 farklı ilginin (sarı, kırmızı ve turkuvaz) daha kullanıldığını yani 4 ilginin de B biriminde dağıldığını rahatlıkla görebiliriz. Gri renkteki kesitler ise birimin esas kodlarını göstermektedir.

image::images/crosscut-before.jpg[caption="Şekil 1: ", title="Kod Saçılması ve Dağılması",width=1000px,align="center"]

Bu sefer bahsedilenleri kod üzerinde gösterelim. Yalnız, bu örnek daha çok _code tangling_ sorununu tasvir etmektedir. Somut sınıfımız olan `Utility`, soyut sınıf `AbstractUtility`, ile yapılandığı gibi `Controllable` isimli arayüzden de faydalanmaktadır.  

<<<

.Enine Kesen İlgilerin Gösterimi
[source,java]
----
public abstract class AbstractUtility {
    public void doSomethingMore(){
        // code block 
    }
    ... Core operations
}

public interface Controllable {
    void doSomething();
}

public class Utility extends AbstractUtility implements  Controllable {
    ... Core members (i.e. fields)
     
    ... Log stream                                                   <1>
    ... Concurrency control lock                                     <2>
     
    public void doSomething(param1, param2,...) {              
        ... Ensure authorization is ok                               <3>
        ... Lock the object to ensure thread-safety                  <4>
        ... Start the transaction                                    <5>
        ... Log about starting the operation                         <6>
        
        ... Perform the core operations of the doSomething method    <7>
        
        ... Log about ending the operation                           <8>
        ... Commit or rollback the transaction                       <9>
        ... Unlock the object                                        <10>
        
    }
     
    ... Core operations

}
----


IMPORTANT:  Metod `doSomething`, sadece code tangling sorununu daha somut haliyle göstermek amacıyla hazırlanmıştır.

    `doSomething` metodunu, toplam 4 tane crosscutting eylem gerçekleşmektedir. 

<1> Loglama İlgisi

<2> Concurrency control denetimini yapan ilgi

<3> Güvenlik kontrolünü sağlayan ilgi

<4> Concurrency control denetimini yapan ilgi

<5> İşlem yönetimi ilgisi

<6> Loglama İlgisi

<7> Metodun yapması gereken *esas* ilgi

<8> Loglama İlgisi

<9> işlem yönetimi ilgisi

<10> Concurrency control denetimini yapan ilgi

Görmektesiniz OOP ve SoC uygulayarak bile tüm bu 4 ilginin yarattığı kod karmaşasının üstesinden gelemiyoruz. Ayrıca bu 4 eylem metodun okunabilirliğini, bakımını ve anlaşılabilirliğini kötü yönde etkilemektedir. Bu karmaşıklığı düzenlemek için AOP paradigmasını başvurup, ona bağlı mevcut yapı taşlarını projelerde uygulamamız gerekmektedir. 

### Aspect-Oriented Programming

Aspect-Oriented Programming (http://en.wikipedia.org/wiki/Aspect-oriented_programming[AOP] - İlgiye Yönelik Programlama) yeni _aspect_ birimleri sayesinde crosscutting (enine kesen) ilgilerin birbirinden ayrışmasına olanak sağlamaktadır. SoC, AOP yardımıyla gelişmektedir çünkü her ilgi _aspect_ birimi olarak ayrı bir şekilde tasarlanmaktadır. Yukarıda gösterilen metodu tekrar düşünürsek, içindeki 4 ilgi artık 4 farklı birbirinden ayrı bir crosscutting birim olarak oluşturulacaktır. Diğer bir deyişle, `doSomething` metodunun içindeki ilgiler kendi birimlerine aktarılacak ve böylece metod kendi *esas* kodlarını uygulayarak metodun okunabilirliği ve bakımı da doğru orantılı bir şekilde artmış olacaktır. Daha önce de belirttiğimiz kod dağınıklığı ve kod saçılmasının da önüne geçmiş oluyoruz AOP yaklaşımını projemizde kullanarak. Şekil 2 bu yapılanmanın bir örneğidir. Sol tarafa bakacak olursak, artık turuncu ilgi `birimlerin` (A, B, C) içinde mevcut değildir, sadece bu ilgilinin program başlatıldığında çalışması gerektiği yerler belirlenmiştir. Tekrar `B birimine` yakınlaşırsak göreceğimiz en belirgin özellik kod miktarındaki azalmadır çünkü artık B birimi sadece *kendi* kodlarından sorumludur. Dikkatle bakıcak olursa en üstteki ve en alttaki gri (esas) kod bloğu bu ilgiler ile çalışmaktadır. Üstteki gri blokta sarı, kırmızı ve turuncu ile alttaki gri ilgi de turuncu (tekrar) ve turkuvaz ilgileriyle çalışmaktadır. Şekilde tüm noktalar crosscutting birimlerine işaret etmektedir ve bunlar AspectJ dilinde _Join Point Shadows_ (birleşim noktası gölgeleri) olarak adlandırılır.

IMPORTANT: Aynı kod bloklarında birden fazla crosscutting ilgileri olabilir (örneğin: `doSomething` metodu ve Şekil 2 sağ taraf). Bu ilgilerin hangi düzende çalışacağını belirlemek için AspectJ _Composition Mechanism_ (Düzenleme Mekanizması) kullanmaktadır.

Kod saçılması size kopyala-yapıştır mantığını çağrıştırabilir. Nitekim öyle çünkü aynı kodu (ilgiyi) sürekli diğer birimlere uyguluyoruz (Şekil 1 sol taraf). Aspect birimleri sayesinde bu kopyalama işlerinden de sıyrılmış oluyoruz. Tek bir ilgiyi bir modülde yazıp bağlanması gerektiği yerlere bağlayarak çalışmasını sağlıyoruz (Şuan bu bahsettiğim tam anlaşılmayabilir ileriki bölümlerde bunların hepsini rahatlıkla kavrayacaksınız).

AOP ayrıca önemli Agile programlama prensiplerinden _"You aren’t gonna need it"_ (YAGNI) pratik yapmanıza imkan verir. Asıl sistem kodlarını yani esas kodları değiştirmeden ayrı aspect birimleri uygulayarak sistemin gereksinimlerini giderebilirsiniz, ayrıca gerektiğinde mevcut sistemin mekanizmasını bozmadan o fonksiyonelliği çıkarabilirsiniz. AOP aynı zamanda sistemlerin gelişmesine yardımcı olur, yeni crosscutting ilgilerin uygulanmasını kolaylaştırır. Ayrıca,  esas birimlerin kodlarına karışmaz ve sistemin bu esas birimleri aspect birimlerinden tamamen farkında olmazlar.

Ayrıca bir önemli bilgiyi de sizlere kısaca anlatmak istiyorum. Sistemin esas birimleri aspect birimlerinden habersiz olmaları AOP'un bize sunduğu bir dezavantajdır aslında. Şöyleki, crosscutting ilgilerin esas bölümlerden ayrı yerlere konulup sistemin çalışma akışını bozmadan aspect birimlerinin içinde devam etmesi, esas sınıfların bu ilgilerden habersiz olmalarına yol açıyor çünkü esas sınıflar bu aspect birimlerini göremiyor (ne `extends` ne de `implements` yolu ile bunlara ulaşamıyorlar). Bu AOP topluluğunda _obliviousness_ (dikkatsizlik, bihaber olma, ilgisizlik) olarak geçmektedir. Sonuç olarak, AspectJ geliştiricileri için ve sınıfların bu ilgilere ilgisizliğini azaltmak amacıyla farklı plug-inler geliştirilmektedir (Örnek: http://www.eclipse.org/ajdt/[AJDT]).  

IMPORTANT: AOP tüm crosscutting ilgileri kökten çözüyor diyemeyiz. AOP, OOP'un yerine geçmemektedir. AOP ve OOP kıyaslamaları yapılmamalıdır çünkü AOP, OOP ve diğer OOP paradigmasına bağlı bazı prensiplerin düzeltemediği noktalara yardım amacıyla uygulanır.

IMPORTANT: AOP kullanımı sistemin kod miktarında kesin azalma sağlıyor diyemeyiz. Sadece kesin olarak esas birimlerin (core modules) kod sayılarında azalma sağlanır. Çünkü, enine kesen ilgiler tamamen silinmemektedir bu ilgiler ayrı aspect birimlerinde (aspect modules) kodlanarak sisteme entegre edilirler. 

image::images/crosscut-after.jpg[caption="Şekil 2: ", title="AOP yaklaşımı ile sorunun giderilmesi",width=1000px,align="center"]

### AspectJ Dili

AspectJ dilini kullanarak AOP yaklaşımını Java projelerimizde rahatlıkla uygulayabileceğiz. AspectJ'nin sitesinde en sade anlatımıyla söylendiği gibi:
____
_AspectJ is a seamless aspect-oriented extension to the Java programming language._
____

Evet hiç kuşkusuz, AspectJ kusursuz bir ilgi yönelimli eklentidir. Java esas programlama (base language) dili olarak ele alındığından Java'nın bize sunduğu tüm özellikler AspectJ dilinde de kullanılır. Java dışında AOP yaklaşımını projelerde kullanmak için AspectJ kendi içinde bazı yapıcı metodlar ile gelmektedir ve farklı bir dil olduğu için de yeni kelimeler ve sözdizimleri mevcuttur. Ayrıca AspectJ dili çok amaçlı programlama dilleri (general-purpose languages) arasında kendi yerini giderek almaya başlamıştır. 

AspectJ çok amaçlı bir dil olmasının temelinde en önemli şu yapıları desteklemektedir::

* Join Point (Birleşme/Birleşim Noktası)
* Pointcut  (Birleşim/Birleşme Nokta Kümesi)
* Advice (Tavsiye yapıları: Before, After, Around, After Throwing ve After Returning)
* Intertype Declaration (Introductions, Ara Tip Tanımlamaları) 
* Aspect (İlgi Birimi/Modülü)

<<<

IMPORTANT: Tüm AOP özelliklerini AspectJ dili direkt olarak sağlamaktadır ama SPRING AOP çatısı AspectJ dilini tam anlamıyla desteklememektedir. Belli temel gereksinimler SPRING AOP ile yapılabilir ama AspectJ dili hem yeni sözdizimi hem de tüm fonsiyonlarıyla geldiği için AOP yaklaşımının tüm özelliklerini bize sağlar.

En başta gösterilen `Utility` sınıfının `doSomething` metodunun içindeki `Log` ilgisini AspectJ yardımıyla AOP tekniği uygulanmış halini görelim. Belli AspectJ yapılarını kullanarak yeni `Utility` sınıfının içindeki log ilgisine bağlı satırların artık boş olduğunu göreceksiniz, bu satırlar artık `LoggingAspect` ismindeki ilgi biriminin içinde tutulmaktadır. 

.AspectJ kullandıktan sonra:
[source,java]
----
public abstract class AbstractUtility {
    public void doSomethingMore(){
        // code block 
    }
    ... Core operations
}
public interface Controllable {
    void doSomething();
}
public class Utility extends AbstractUtility implements  Controllable {
    ... Core members (i.e. fields)
     
    ...                                                             
    ... Concurrency control lock                                    
     
 >>  public void doSomething(<method parameters>) {
        ... Ensure authorization is ok                              
        ... Lock the object to ensure thread-safety                 
        ... Start the transaction                                   
        ...                                                         
        
        ... Perform the core operations of the doSomething method   
        
        ...                                                         
        ... Commit or rollback the transaction                      
        ... Unlock the object                                       
    }
     
    ... Core operations
}
----

<<<

.Log İlgisinin Ayrı Birimi
[source,aspectj]
----
public aspect LoggingAspect {
    
    ... Core Log stream                                              <1>
    
    //eşleme işlemi Pointcut yapısı
    pointcut logOperation(): execution(public void doSomething(..)); <2>
    
    // After Advice Yapısı
    // Log about ending the operation of the doSomething method
    after (): logOperation() {                                       <3>
        // crosscutting actions
    }
    
    // Before Advice yapısı
    // Log about starting the operation of the doSomething method
    before (): logOperation() {                                      <4>
        // crosscutting actions
    }

}
----
<1> `LoggingAspect` ilgisinde gerekli alanlar esas kod duruma gelmiştir.

<2> Mevcut birleşim noktası olan `doSomething` metodunu bulup seçer.

<3> After advice (sonra tavsiye) yapısını çalıştır esas kodlardan *sonra*.

<4> Before advice (önce tavsiye) yapısını çalıştır esas kodlardan *önce*.

IMPORTANT: Somut bir şekilde görüyoruz ki AspectJ, crosscutting kodları esas kodlardan ayırmaya yaramaktadır ama aynı zamanda `Utility` sınıfında bu ilgilerden habersiz olmasına sebep olmaktadır. `Aspect` birimleri sistemin çalışma akışınıda etkilemektedir. Örneğin, sistem `doSomething` metodunu çalıştırdığında artık sırası gelince `LoggingAspect` biriminin içine girerek crosscutting ilgileri (tavsiye gövdelerinde) çalıştıracaktır.

AspectJ bir Java eklentisi olduğundan mevcut AspectJ yapılarının sisteme entegre olması için ekstra bir _Weaver_ (Dokuma) ile çalışmaktadır. _Aspect Weaver_ tarafından üretilen byte kodlar ki bunlar sistemdeki tüm aspect birimlerini kapsamaktadır, Java Sanal Makinede (JVM) sistemdeki diğer tüm byte kodlar ile beraber harmanlanarak çalışır. Her AspectJ yapısı aslında en temel Java elementlerine denk düşmektedir:

*   Sistemdeki _Aspect_ ilgileri sınıf yapısına işaret etmektedir.
*   Bu ilgi birimlerinin içindeki alanlar ve metodlar gene bu ilgi birimlerine ait olurlar. 
*   _Pointcut_ yapıları ara element olarak geçmekte olup, Java metod yapısını alırlar.
*   _Advice_ yapıları gene metodlara denk düşer ve byte kod dönüşümü sonucu ilgiye bağımlı sınıflarda bu metodları (tavsiyeleri) cağırarak ulaşırlar. 
*   Ara yapı tanımlamalarında (intertype declaration), alan, metod, yapıcı ve dahili-tip tanımlamaları hedef sınıflara konuşlandırılır.

AspectJ'den faydalanmak için mevcut geliştirme platformlarına: Eclipse IDE, IntelliJ IDEA ve NetBeans,  kurulumu sırasıyla bağlantılarda anlatılmaktadır:

. Eclipse kullanıcıları için yüklenmesi gereken plug-in: http://eclipse.org/ajdt/downloads/[AJDT]
    * Eclipse Luna 4.4 : 
        ** Help -> Install New Software: http://download.eclipse.org/tools/ajdt/44/dev/update/
. IntelliJ IDEA kullanıcılarının yüklemesi gereken AspectJ Plug-in: http://www.jetbrains.com/idea/help/aspectj.html[AJ Plug-in].
. NetBeans kullanıcıları için gerekli talimatlar bağlantıda verilmektedir http://aspectj-netbeans.sourceforge.net/[NetBeans].

Aslında bölümün genelinde hep Java geliştiricilerine hitap edilmektedir ama AOP yaklaşımını  başka programlama dillerinde de kulanmak mümkündür (Örneğin; PHP, C#, C geliştiricileri için) AOP yaklaşımının kullanılmasını sağlayan bazı mimariler aşağıda gösterilmektedir:

.  http://www.postsharp.net/[PostSharp .NET]
.  http://www.aspectc.org/[AspectC ve AspectC++]
.  http://www.aspectjs.com/[AspectJS]
.  http://jbossaop.jboss.org/[JBOSS Java]
.  https://github.com/deanwampler/Aquarium[Aquarium Ruby]
.  https://github.com/mgechev/angular-aop[AngularJS]
.  https://github.com/victorcastroamigo/aopjs[JS ve jQuery]
.  https://github.com/AntyaDev/KingAOP[AOP .NET]
.  https://github.com/gcao/aspector[Aspector Ruby]
. https://github.com/AOP-PHP/AOP[AOP PHP]

Bilinen bazı AspectJ projelerine göz atmak isterseniz:

.  http://www.kevinjhoffman.com/tosem2012/[HealthWatcher]
.  http://ajhotdraw.sourceforge.net/[AJHotDraw]
.  http://sourceforge.net/projects/ajhsqldb/[AJHSQLDB]
.  https://github.com/deanwampler/Contract4J5[Contract4J5]
.  http://sourceforge.net/projects/mobilemedia/[MobileMedia]
.  http://sourceforge.net/projects/ibatislancaster/[iBatis]
.  http://www.kevinjhoffman.com/tosem2012/[Telestrada]
.  http://www.guzzzt.com/coding/aspecttetris.shtml[TetrisAJ]

Son olarak, AspectJ'nin sitesinde kitap niteliğinde çok güzel bir kılavuz bulunmaktadır: http://eclipse.org/aspectj/doc/released/progguide/index.html